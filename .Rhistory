fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst + smoothness_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst + compactness_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst + concavity_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst + concave.points_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst + concave.points_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst + symmetry_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + area_worst + fractal_dimension_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + smoothness_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + compactness_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + compactness_worst + concavity_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + compactness_worst + concavity_worst + concave.points_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + compactness_worst + concavity_worst + symmetry_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + compactness_worst + concavity_worst + fractal_dimension_worst)
fit = glm(worst.f, family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + compactness_worst + concavity_worst + fractal_dimension_worst)
fit = glm(diagnosis ~ ., family = binomial(link = "logit"), data = data)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
cor.matrix = cor(data)
f = formula(diagnosis ~ radius_mean + texture_mean + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + fractal_dimension_mean + symmetry_mean + radius_se + perimeter_se + symmetry_se)
mean.f = formula(diagnosis ~ radius_mean + texture_mean  + perimeter_mean + smoothness_mean + compactness_mean + concavity_mean + concave.points_mean + symmetry_mean + fractal_dimension_mean)
se.f = formula(diagnosis ~ radius_se + texture_se + smoothness_se + compactness_se + concavity_se + symmetry_se)
worst.f = formula(diagnosis ~ radius_worst + texture_worst + perimeter_worst + compactness_worst + concavity_worst + fractal_dimension_worst)
fit = glm(mean.f, family = binomial(link = "logit"), data = data)
View(fit)
library(tidyverse)
library(matrixcalc)
cancer_data = read_csv("./breast-cancer-1.csv")
View(cancer_data)
library(tidyverse)
library(glmnet)
library(modelr)
library(caret)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
View(standardized.data)
X = data %>% dplyr::select(radius_mean:fractal_dimension_worst)
library(tidyverse)
library(glmnet)
library(modelr)
library(caret)
standardize = function(col) {
mean = mean(col)
stdev = sd(col)
return((col - mean)/stdev)
}
# just standardize the covariates
standardized.data = read.csv(file = "breast-cancer-1.csv") %>%
dplyr::select(radius_mean:fractal_dimension_worst) %>%
map_df(.x = ., standardize)
# add back in the response and ids
data = cbind(read.csv(file = "breast-cancer-1.csv") %>% dplyr::select(diagnosis), standardized.data) %>%
mutate(diagnosis = ifelse(diagnosis == "M", 1, 0))
X = data %>% dplyr::select(radius_mean:fractal_dimension_worst)
y = data$diagnosis
View(X)
x = cancer_data %>%
dplyr::select(radius_mean:fractal_dimension_mean, radius_se, perimeter_worst, symmetry_worst) %>%
dplyr::select(area_mean)
View(x)
x = cancer_data %>%
dplyr::select(radius_mean:fractal_dimension_mean, radius_se, perimeter_worst, symmetry_worst) %>%
dplyr::select(-area_mean)
View(x)
intercept = rep(1, 569)
central = function(x){
x = (x-mean(x))/sd(x)
return(x)
}
x = cancer_data %>%
dplyr::select(radius_mean:fractal_dimension_mean, radius_se, perimeter_worst, symmetry_worst) %>%
dplyr::select(-area_mean) %>%
apply(2, central) %>%
cbind(intercept, .) %>%
as.matrix()
#colnames(x) = NULL
y = as.vector(ifelse(cancer_data$diagnosis=="M",1,0))  # response variables
beta = rep(0.001,31)
ans1 = NewtonRaphson(x, y, logisticstuff, beta)
NewtonRaphson <- function(x, y, logisticstuff, start, tol=1e-10, maxiter = 200) {
i <- 0
cur <- start
stuff <- logisticstuff(x, y, cur)
res = c(0, cur)
#res <- c(0, stuff$loglik, cur)
prevloglik <- -Inf      # To make sure it iterates
#while(i < maxiter && abs(stuff$loglik - prevloglik) > tol && stuff$loglik > -Inf)
while(i < maxiter && abs(stuff$loglik - prevloglik) > tol)
{
i <- i + 1
prevloglik <- stuff$loglik
prev <- cur
cur <- prev - solve(stuff$Hess) %*% stuff$grad
stuff <- logisticstuff(x, y, cur)        # log-lik, gradient, Hessian
res = rbind(res, c(i, cur))
#res <- rbind(res, c(i, stuff$loglik, cur))
# Add current values to results matrix
}
return(res)
}
hess_cal = function(x,p){
len = length(p)
hess = matrix(0, ncol(x), ncol(x))
for (i in 1:len) {
x_t = t(x[i,])
unit = t(x_t)%*%x_t*p[i]*(1-p[i])
#unit = t(x[i,])%*%x[i,]*p[i]*(1-p[i])
hess = hess + unit
}
return(-hess)
}
logisticstuff <- function(x, y, betavec) {
u <- x %*% betavec[1:31]
expu <- exp(u)
loglik = vector(mode = "numeric", 569)
for(i in 1:569)
loglik[i] = y[i]*u[i] - log(1 + expu[i])
loglik_value = sum(loglik)
# Log-likelihood at betavec
p <- expu / (1 + expu)
# P(Y_i=1|x_i)
grad = vector(mode = "numeric", 31)
#grad[1] = sum(y - p)
for(i in 1:31)
grad[i] = sum(t(x[,i])%*%(y - p))
#Hess <- -t(x)%*%p%*%t(1-p)%*%x
Hess = hess_cal(x, p)
return(list(loglik = loglik_value, grad = grad, Hess = Hess))
}
intercept = rep(1, 569)
central = function(x){
x = (x-mean(x))/sd(x)
return(x)
}
x = cancer_data %>%
dplyr::select(radius_mean:fractal_dimension_mean, radius_se, perimeter_worst, symmetry_worst) %>%
dplyr::select(-area_mean) %>%
apply(2, central) %>%
cbind(intercept, .) %>%
as.matrix()
#colnames(x) = NULL
y = as.vector(ifelse(cancer_data$diagnosis=="M",1,0))  # response variables
beta = rep(0.001,31)
ans1 = NewtonRaphson(x, y, logisticstuff, beta)
intercept = rep(1, 569)
central = function(x){
x = (x-mean(x))/sd(x)
return(x)
}
x = cancer_data %>%
dplyr::select(radius_mean:fractal_dimension_mean, radius_se, perimeter_worst, symmetry_worst) %>%
dplyr::select(-area_mean) %>%
apply(2, central) %>%
cbind(intercept, .) %>%
as.matrix()
#colnames(x) = NULL
y = as.vector(ifelse(cancer_data$diagnosis=="M",1,0))  # response variables
beta = rep(0.001,13)
ans1 = NewtonRaphson(x, y, logisticstuff, beta)
logisticstuff <- function(x, y, betavec) {
u <- x %*% betavec
expu <- exp(u)
loglik = vector(mode = "numeric", 569)
for(i in 1:569)
loglik[i] = y[i]*u[i] - log(1 + expu[i])
loglik_value = sum(loglik)
# Log-likelihood at betavec
p <- expu / (1 + expu)
# P(Y_i=1|x_i)
grad = vector(mode = "numeric", 31)
#grad[1] = sum(y - p)
for(i in 1:31)
grad[i] = sum(t(x[,i])%*%(y - p))
#Hess <- -t(x)%*%p%*%t(1-p)%*%x
Hess = hess_cal(x, p)
return(list(loglik = loglik_value, grad = grad, Hess = Hess))
}
logisticstuff <- function(x, y, betavec) {
u <- x %*% betavec
expu <- exp(u)
loglik = vector(mode = "numeric", 569)
for(i in 1:569)
loglik[i] = y[i]*u[i] - log(1 + expu[i])
loglik_value = sum(loglik)
# Log-likelihood at betavec
p <- expu / (1 + expu)
# P(Y_i=1|x_i)
grad = vector(mode = "numeric", 13)
#grad[1] = sum(y - p)
for(i in 1:13)
grad[i] = sum(t(x[,i])%*%(y - p))
#Hess <- -t(x)%*%p%*%t(1-p)%*%x
Hess = hess_cal(x, p)
return(list(loglik = loglik_value, grad = grad, Hess = Hess))
}
intercept = rep(1, 569)
central = function(x){
x = (x-mean(x))/sd(x)
return(x)
}
x = cancer_data %>%
dplyr::select(radius_mean:fractal_dimension_mean, radius_se, perimeter_worst, symmetry_worst) %>%
dplyr::select(-area_mean) %>%
apply(2, central) %>%
cbind(intercept, .) %>%
as.matrix()
#colnames(x) = NULL
y = as.vector(ifelse(cancer_data$diagnosis=="M",1,0))  # response variables
beta = rep(0.001,13)
ans1 = NewtonRaphson(x, y, logisticstuff, beta)
ans1
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
library(tidyverse)
library(Hmisc)#for errvar
library(ggcorrplot) # for correlation heatmap
View(x)
glm_x = x[,1:12]
glm_x = x[,2:13]
View(glm_x)
glm_x = x[,2:13]
cancer_model <- glm(y~glm_x, family = binomial(link = "logit"))
glm_x = x[,2:13]
cancer_model <- glm(y ~ glm_x, family = binomial(link = "logit"))
summary(cancer_model)
